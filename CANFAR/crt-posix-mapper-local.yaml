# POSIX Mapper web service deployment
deployment:
  hostname: canfar.kasi.re.kr
  posixMapper:
    #image: images.opencadc.org/platform/posix-mapper:0.2.1
    #imagePullPolicy: Always
    #resourceID: ivo://opencadc.org/posix-mapper
    # Optionally set the DEBUG port.
    #extraEnv:
    #  - name: CATALINA_OPTS
    #    value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
    #  - name: JAVA_OPTS
    #    value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"

    # Uncomment to debug.  Requires options above as well as service port exposure below.
    #extraPorts:
    #  - containerPort: 5555
    #    protocol: TCP

    # URI or URL of the OIDC (IAM) server.  Used to validate incoming tokens.
    #oidcURI: https://ska-iam.stfc.ac.uk/
    # Resources provided to the Skaha service.
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "500m"

    # Used to set the minimum UID.  Useful to avoid conflicts.
    minUID: 10000

    # Used to set the minimum GID.  Keep this much higher than the minUID so that default Groups can be set for new users.
    minGID: 900000

    # The URL of the IVOA Registry
    registryURL: https://spsrc27.iaa.csic.es/reg

    # Optionally mount a custom CA certificate
    extraVolumeMounts:
      - mountPath: "/config/cacerts"
        name: cacert-volume

    # Create the CA certificate volume to be mounted in extraVolumeMounts
    extraVolumes:
      - name: cacert-volume
        secret:
          defaultMode: 420
          secretName: posix-manager-cacert-secret

# Declare the storage for the skaha service to use.
storage:
  #  service:
  #  spec:
  #    persistentVolumeClaim:
  #      claimName: skaha-pvc

secrets:
  # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
  posix-manager-cacert-secret:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdKRENDQlF5Z0F3SUJBZ0lRRHNHZHBzNDRlanZrMWZCeDByYTMyVEFOQmdrcWhraUc5dzBCQVFzRkFEQmcKTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCMwpkM2N1WkdsbmFXTmxjblF1WTI5dE1SOHdIUVlEVlFRREV4WlNZWEJwWkZOVFRDQlVURk1nVWxOQklFTkJJRWN4Ck1CNFhEVEl6TVRFd09EQXdNREF3TUZvWERUSTBNVEV4T1RJek5UazFPVm93RnpFVk1CTUdBMVVFQXd3TUtpNXIKWVhOcExuSmxMbXR5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0OFo5Q3F4egpsSFBJZVZSc05QajdLMlkyc3dGUnhDbVY0em4yRkRzZ1NIK2hQWkRvd08wenJUeEZsMFIya2tPOEx0c0NCUm5iClFETzd5TlY3YjludFBIejdiUGd6WlBnYnltNENuZTJsZ1NreGhGckcveTVndnpOUnF2OU9qSjIxNDdtREVNTDAKOUJ5QkgybG1pa1B0em1naEpVak9XUXZNb2xKejJtRE44SzkxOVpsT1BncHdJM1U4THZtUEpEY0FPaGgySGpjeAo3MkNJa3pBMXBTY0tsM1VCcU91WTd3TXdFdVF2SVhNR1RhM3dLWXl0NytJM0IxSm5RWXAxVk5RSmQxZVVJdG9ZCjltVlI3YUI0eGZRQVozT2oya1pDUmUvdllIVk5OU3N6alcwVlFDb203eEp5aHl5QzdUQWJubzlPSGxmVXBmSlAKOGF6VlI1UjFpOHpYOHdJREFRQUJvNElESVRDQ0F4MHdId1lEVlIwakJCZ3dGb0FVRE50c2dra1BTbWNLdUJUdQplc1JJVW9qclZqZ3dIUVlEVlIwT0JCWUVGTTBOSUwzQUxlb0JodHVaa0xMWGdjenhUM0swTUNNR0ExVWRFUVFjCk1CcUNEQ291YTJGemFTNXlaUzVyY29JS2EyRnphUzV5WlM1cmNqQStCZ05WSFNBRU56QTFNRE1HQm1lQkRBRUMKQVRBcE1DY0dDQ3NHQVFVRkJ3SUJGaHRvZEhSd09pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13RGdZRApWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQS9CZ05WCkhSOEVPREEyTURTZ01xQXdoaTVvZEhSd09pOHZZMlJ3TG5KaGNHbGtjM05zTG1OdmJTOVNZWEJwWkZOVFRGUk0KVTFKVFFVTkJSekV1WTNKc01IWUdDQ3NHQVFVRkJ3RUJCR293YURBbUJnZ3JCZ0VGQlFjd0FZWWFhSFIwY0RvdgpMM04wWVhSMWN5NXlZWEJwWkhOemJDNWpiMjB3UGdZSUt3WUJCUVVITUFLR01taDBkSEE2THk5allXTmxjblJ6CkxuSmhjR2xrYzNOc0xtTnZiUzlTWVhCcFpGTlRURlJNVTFKVFFVTkJSekV1WTNKME1Bd0dBMVVkRXdFQi93UUMKTUFBd2dnRitCZ29yQmdFRUFkWjVBZ1FDQklJQmJnU0NBV29CYUFCMkFIYi9pRDhLdHZ1VlVjSmh6UFdIdWpTMApwTTI3S2R4b1FncWY1bWRNV2pwMEFBQUJpNjFMcVZ3QUFBUURBRWN3UlFJZ056VVorNjQrOC93T2lnMnM0NmhmCmNSNEZLSHhDQUM5bnR0eENMOWovbi9rQ0lRREVEcFVoeGFLbzJ2WTBGVmpjZVQ3TkJ3STVrTG1LUHg1bVdTMGgKVktia2p3QjJBRWl3NDJ2YXBrYzBEK1ZxQXZxZE1Pc2NVZ0hMVnQwc2dkbTd2NnM1MklSekFBQUJpNjFMcVRBQQpBQVFEQUVjd1JRSWdmeWxQbnh5SnBURjNpbVVHajZuTDFOWkFuSlVmUUxqM0F2clNDZXVqNXU4Q0lRQ2dWOXdVCnJaMzVSWmg1em1ESjZNTnd1R3VoalNYdXdYZktobUZWMUNtZDdnQjJBRDhYUzAvWElrZFlsQjFsSElTK0RSTHQKa0RkL0g0VnE2OEcvS0lYcytHUnVBQUFCaTYxTHFYVUFBQVFEQUVjd1JRSWhBS1FFZTcyUktUbk13Yy9seE9iOApkMDgrRmZ2ZU1NS3BHWG5lWkcyelZhUEZBaUE3MXlDNXFCNnRvaE9zcEgzcGsxMDdPdDVnQ0lHdTlEMUEzSFhECjkzcGxyREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBTGZXdmxZY0oxQ2xqYWRZSGdUT0owaytNOGRTY3JLYVMKeFJ6R2RxM3Fvb2J6aTFsY0MxWWE5Z1V0a2NYVElvb2N2MjEySVRQRENiaXh3Mk1PckRsa243WXliWmsvWE5Idgo4WmZVazVVVGVvTG1TeDIzWVoveDVLOFgxUE9iMFlraGVBZkc1bnFWbnNIN1IxL1hqUWc3Q293dkVRU3EzcFVkClhZaHRFTjJZM3hTcWFqd3F0NWRqY1AzVWZDc1pSL2R2N1FwMzVCdVdUL3J0bWxnTE5QQXFtOFI5TUVTYUxtVDIKRldGZ1A0NDMreGJwK1FWMG5jQXUvK04rYk5FNTd2V3lUOVoyNWNFUmZ0MnNLeWg3VDZoT0lJYlRmNWtPNE9PQgozY24xSG5yZTNaTHJwTUZrL0hHWjVkNTJhUlZmNU9TVG45eW1KZ0x6djYyY25PeU5NS29RakE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFc3pDQ0E1dWdBd0lCQWdJUUN5V1VJczdaZ1NvVm9FNlpVb29PK2pBTkJna3Foa2lHOXcwQkFRc0ZBREJoCk1Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjMKZDNjdVpHbG5hV05sY25RdVkyOXRNU0F3SGdZRFZRUURFeGRFYVdkcFEyVnlkQ0JIYkc5aVlXd2dVbTl2ZENCSApNakFlRncweE56RXhNREl4TWpJME16TmFGdzB5TnpFeE1ESXhNakkwTXpOYU1HQXhDekFKQmdOVkJBWVRBbFZUCk1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWoKYjIweEh6QWRCZ05WQkFNVEZsSmhjR2xrVTFOTUlGUk1VeUJTVTBFZ1EwRWdSekV3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMvdVZrbFJCSTFGdUpkVUVrRkN1REwvSTNhSlFpYVo2YWliUkhqCmFwL2FwOXp5MWFZTnJwaGU3WWNhTndNb1BzWnZYRFIraE5KT285Z2JnT1lWVFBxOGdYYzg0STc1WUtPSGlWQTQKTnJKSlFaNnAyc0pReXF4NjBIa0VJanpJTisxTFFMZlhUbHB1em5Ub09hMWh5VEQweXlpdEZ5T1l3VVJNKy9DSQo4Rk5GTXBCaHcyMmhwZUFRa09PTG1zcVQ1UVpKWWVpazdxbHZuOGdmRCtYZERuazNra3V1dTBlRyt2dXlyU0dyCjV1WDVMUmhGV2x2MXpGUURjaC9FS21kMTYzbTZ6L3ljeC9xTGE5enl2SUxjN2NRcGIrazdUTHJhOVdFMTdZUFMKbjlBTmpHK0VDbzlQRFczTjlsd2hLUUNOdncxZ0dvZ3V5Q1F1N0hFN0JuVzhlU1NGQWdNQkFBR2pnZ0ZtTUlJQgpZakFkQmdOVkhRNEVGZ1FVRE50c2dra1BTbWNLdUJUdWVzUklVb2pyVmpnd0h3WURWUjBqQkJnd0ZvQVVUaUpVCklCaVY1dU51NWcvNitya1M3UVlYanprd0RnWURWUjBQQVFIL0JBUURBZ0dHTUIwR0ExVWRKUVFXTUJRR0NDc0cKQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTURRR0NDc0dBUVVGQndFQgpCQ2d3SmpBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1WkdsbmFXTmxjblF1WTI5dE1FSUdBMVVkCkh3UTdNRGt3TjZBMW9ET0dNV2gwZEhBNkx5OWpjbXd6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFZHMKYjJKaGJGSnZiM1JITWk1amNtd3dZd1lEVlIwZ0JGd3dXakEzQmdsZ2hrZ0JodjFzQVFFd0tqQW9CZ2dyQmdFRgpCUWNDQVJZY2FIUjBjSE02THk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDBOUVV6QUxCZ2xnaGtnQmh2MXNBUUl3CkNBWUdaNEVNQVFJQk1BZ0dCbWVCREFFQ0FqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFHVVNsT2I0SzNXdG0KU2xibUU1MFVZQkhYTTBTS1hQcUhNems2WFFVcENoZUYvNHFVOGFPaGFqc3lSUUZEVjFpaC91UElnN1lIUnRGaQpDVHE0Ryt6YjQzWDFUNzduSmdTT0k5cHEvVHFDd3R1a1o3dTlWTEwzSkFxM1dkeTJtb0tMdnZDOHRWbVJ6a0FlCjB4UUNrUktJamJCRzgwTVN5RFgvUjR1WWdqNlppTlQvWmc2R0k2Um9mZ3FncERkc3NMYzBYSVJRRW90eElaY0sKelAzcEdKOUZDYk1IbU1MTHl1QmQrdUNXdlZjRjJvZ1lBYXd1ZkNoUy9QVDYxRDlycXpQUlM1STJ1cWEzdG1JVAo0NEpoSmdXaEJuRk1iN0FHUWt2TnE5S05TOWRkM0dXYzE3SC9kWGExZW5veHpXakUwaEJkRmp4UGhVYjBXM3dpCjhvMzQvbThGeHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURqeG4wS3JIT1VjOGg1ClZHdzArUHNyWmphekFWSEVLWlhqT2ZZVU95QklmNkU5a09qQTdUT3RQRVdYUkhhU1E3d3Uyd0lGR2R0QU03dkkKMVh0djJlMDhmUHRzK0ROaytCdktiZ0tkN2FXQktUR0VXc2IvTG1DL00xR3EvMDZNbmJYanVZTVF3dlQwSElFZgphV2FLUSszT2FDRWxTTTVaQzh5aVVuUGFZTTN3cjNYMW1VNCtDbkFqZFR3dStZOGtOd0E2R0hZZU56SHZZSWlUCk1EV2xKd3FYZFFHbzY1anZBekFTNUM4aGN3Wk5yZkFwakszdjRqY0hVbWRCaW5WVTFBbDNWNVFpMmhqMlpWSHQKb0hqRjlBQm5jNlBhUmtKRjcrOWdkVTAxS3pPTmJSVkFLaWJ2RW5LSExJTHRNQnVlajA0ZVY5U2w4ay94ck5WSApsSFdMek5mekFnTUJBQUVDZ2dFQkFKd1ZEdWg2aGZVclppdm1Nd1FWdlovZXVncnVFNGJWYkZXNkNTdVIzS3h4CmNSOU1Kb0xWeUh5a2VaZVBuYVRhNzZBNENXbFBiNVBPSDVjZTJ5Z3BjTXpyWkNzbTVha0I3NkZHdzFwUFdBTnIKSS9ocmNFTzdGeWJPVnQ5VGRoTWJtMkdDWlJMZVZaYlYxWkdkMjF0Ujh5cG01cGV6RFZ1dG56dDRQdFZkVXFIagpmMW9jOFNYZ3U3YjlWOG1CRG9VK1hYNVVoZ0Y4RzJSVW5YaTcxSkxtSzBtOWNKRzBTblpqZHh6cWFvMjhDY2tOCmNrd0FERTBxVk5jQXU4ejZmeENZelpSQXF4YzNEYTBxaDhWU2tzVlR3emNmL3BHUFFuMWVjaVBRTVdCeTNGZ0kKV2RmcjNmMVRWV050aTdyR2dWaU4zeFNHd0Ywb3RaVmtLVUhOM2pXUjA0a0NnWUVBK1F4dmxKWWxlMU5rRDQ2dgoxM24yMHp5UHN2MlQ0ZVV0eEI1eHpHTlJ3dlVzSTJ4cE8rKzJvQlcyTHhJSXVLS2E4b2RyOG5OdVBhUGkwcUJ5CjlCcXZGSlVJL2pjRW96bkJ4d0tCSzdJZFUwazNCSkkrNFhSZER0VUcyMlJrRmplU3EzdUt5YTdJVWxTMy8yU28Kb25LeTV2ZHo0MkFiSGUvK2RLci9zbWpCYjE4Q2dZRUE2aUlMdDN3cFZGU2M0eGpxVlExRWY0ZEhiQkNpMzlwbgo3anp6dko4Z3FyREp2Y250QzYxTWl1RVZ3OXpxNXQzT2V5MCttMFdabWtOL3RVdFd1Ti9DWWt3b0Zya0pYbGRTCi9CYnphRWZMZWorTWdQM3NwSmxGWmwyOEtFUGVLeEx3RHUraVFUL2s5a3ptVlVjL0pzVi9VVFZ3VnJIMFRDUjAKaFNtMG9obTVZKzBDZ1lFQW85aVduLzZYOGliT3NaMkIraFQzV2NtQ0VKUGJjc1kvOGNMRncxMmtNTXJ6bXVwNwo0VDYzdTJJTlZiSmJvbnozeTQ5a2FVR2Z5VlhFcUNWKyt6R0M5ZHVHNnhodktLT2E1TDYxRkhZOTdNbENOUE95CkFzbDNYNGF1MkMrWDJUWCtmR3J1eC9rQk9Za2E5QjdaQXViSzVFRHdNU3JOTEVqejh2VjgrM2NIcTZrQ2dZQWMKRmxWOWY0R2R3a0RINVpkRytMNTg1Z2VsYVNHQTVUeU9rZlZUYld1SHpvbUZJUkkwMG1kYVNjSklxdG5yTkRTdgpCakI2aEJEM05wMjlhL3BOVjFxRVhFcDYzMXZHVzRkekFuWFV6cmdVUkVkZ3VoV0hjWE9uNGhyT1ljWG5PUEJmCmVsUG1xL21WcW9mL052cldkZDdlS1NEKzVYNC9IQ2gyU1JpSVVibXh5UUtCZ0dMVmJvZzc2cXlETERpWVdDb2wKVGVISkZxbVRBL1F5VDdJRnFMMGYreXJHTElJRDN0RHJBU0FFQXZ3TnVrSHpBbzFKaUs2dlBEOFh1bmFmdlBhZApFc3plMnpGUXdEd2ZJbWdJTzczbnR3MGZFbm1jK0ZDbytKNHUxdDJRT1FjUXRMMjY0eEptQ2QzcDFQcDROT2FhCnBobm1xajdrR1JZbVNkbjArM2YyYlUyWQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==

# These values are preset in the catalina.properties, and this default database only exists beside this service.
# It's usually safe to leave these as-is.
# postgresql:
#   auth:
#     username: posixmapper
#     password: posixmapperpwd
#     database: mapping
#     schema: mapping
#   storage:
#     spec:
#       hostPath:
#         path: "/posixmapper/data"

# An omission equals true, so set this explicitly to false as we already installed it.
base:
  install: false
